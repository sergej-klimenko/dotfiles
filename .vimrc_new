source $VIMRUNTIME/mswin.vim

let g:mapleader = "\<Space>"
let s:is_windows = has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_nvim = has('nvim')
let s:cache_dir = '~/.vim/.cache'

" Autoinstall vim-plug {{{
  if s:is_windows
    let s:plug_vim = $VIMRUNTIME . '\autoload\plug.vim'
  else
    let s:plug_vim = $HOME . '/.vim/autoload/plug.vim'
  endif

  if empty(glob(s:plug_vim))
    silent execute "!curl -k -fLo " . s:plug_vim . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall
  endif
" }}}

" Plugins initialization start {{{
  if s:is_windows
      call plug#begin($VIM . '/plugins')
  else
      call plug#begin( '~/.vim/plugins')
  endif
" }}}

" Appearance
" ====================================================================
Plug 'vim-airline/vim-airline'
" {{{
      let g:airline_theme = s:settings.airline
      let g:airline#extensions#whitespace#enabled = 1
      let g:airline#extensions#tagbar#enabled = 1
      let g:airline#extensions#bufferline#enabled = 0
      let g:airline_powerline_fonts = 1
      let g:airline#extensions#tabline#enabled = 1
      let g:airline#extensions#tabline#show_buffers = 1
      let g:airline#extensions#tabline#fnamemod = ':t'
      let g:airline#extensions#tabline#buffer_idx_mode = 1

      nmap <leader>1 <Plug>AirlineSelectTab1
      nmap <leader>2 <Plug>AirlineSelectTab2
      nmap <leader>3 <Plug>AirlineSelectTab3
      nmap <leader>4 <Plug>AirlineSelectTab4
      nmap <leader>5 <Plug>AirlineSelectTab5
      nmap <leader>6 <Plug>AirlineSelectTab6
      nmap <leader>7 <Plug>AirlineSelectTab7
      nmap <leader>8 <Plug>AirlineSelectTab8
      nmap <leader>9 <Plug>AirlineSelectTab9
 " }}}
 Plug 'vim-airline/vim-airline-themes'
 Plug 'majutsushi/tagbar'
 " {{{
      nnoremap <silent> <F9> :TagbarToggle<CR>

      let g:tagbar_type_plsql = {
          \ 'ctagstype' : 'sql',
          \ 'kinds' : [
              \ 'm:macros:0:1',
              \ 'P:packages:1:1',
              \ 'd:prototypes:0:1',
              \ 'c:cursors:0:1',
              \ 'f:functions:0:1',
              \ 'F:record fields:0:1',
              \ 'L:block label:0:1',
              \ 'p:procedures:0:1',
              \ 's:subtypes:0:1',
              \ 't:tables:0:1',
              \ 'T:triggers:0:1',
              \ 'v:variables:0:1',
              \ 'i:indexes:0:1',
              \ 'e:events:0:1',
              \ 'U:publications:0:1',
              \ 'R:services:0:1',
              \ 'D:domains:0:1',
              \ 'V:views:0:1',
              \ 'n:synonyms:0:1',
              \ 'x:MobiLink Table Scripts:0:1',
              \ 'y:MobiLink Conn Scripts:0:1',
              \ 'z:MobiLink Properties:0:1'
          \ ]
      \ }
 " }}}

 " Completion
" ====================================================================
Plug 'SirVer/ultisnips'
" {{{
  nnoremap <leader>se :UltiSnipsEdit<CR>
  let g:UltiSnipsEditSplit = 'horizontal'

  let g:UltiSnipsListSnippets = '<nop>'
  let g:UltiSnipsExpandTrigger = '<c-l>'
  let g:UltiSnipsJumpForwardTrigger = '<c-l>'
  let g:UltiSnipsJumpBackwardTrigger = '<c-b>'
  let g:ulti_expand_or_jump_res = 0

  function! <SID>ExpandSnippetOrReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
      return snippet
    else
      return "\<C-Y>"
    endif
  endfunction
  imap <expr> <CR> pumvisible() ? "<C-R>=<SID>ExpandSnippetOrReturn()<CR>" : "<Plug>delimitMateCR"
" }}}
Plug 'honza/vim-snippets'